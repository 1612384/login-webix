worker_processes  1;
error_log logs/error.log;


events {
    worker_connections 1024;
}
http {
    init_worker_by_lua_block {
        redis = require "resty.redis"
        aes = require "resty.aes"
        str = require "resty.string"
        
    }
    lua_shared_dict prometheus_metrics 10M;
    init_by_lua '
        prometheus = require("prometheus").init("prometheus_metrics")
        metric_requests = prometheus:counter("nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
        metric_latency = prometheus:histogram("nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
        metric_connections = prometheus:gauge("nginx_http_connections", "Number of HTTP connections", {"state"})
        metric_response_sizes = prometheus:histogram("nginx_http_response_size_bytes", "Size of HTTP responses", {"connect"} , {10,100,1000,10000,100000,1000000})
        
    ';
    log_by_lua '
        metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
        metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
        metric_response_sizes:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
    ';
    server {
        listen 8080;
        location /metrics {
            content_by_lua '
            metric_connections:set(ngx.var.connections_reading, {"reading"})
            metric_connections:set(ngx.var.connections_waiting, {"waiting"})
            metric_connections:set(ngx.var.connections_writing, {"writing"})
            prometheus:collect()
            ';
        }
        location / {
            content_by_lua '
                ngx.say("hello, world")
            ';
        }
        location /email{
            client_max_body_size 50k;
            client_body_buffer_size 50k;
            content_by_lua_file lua/email.lua;
        }
        location /login {
            client_max_body_size 50k;
            client_body_buffer_size 50k;

            content_by_lua_file lua/login.lua;
        }
        location /users {
            content_by_lua_file lua/users.lua;
        }
        
        location /request_body {
            
            client_max_body_size 50k;
            client_body_buffer_size 50k;

            content_by_lua_block {
                local red = redis:new()
                red:set_timeout(1000)
                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                else
                    ngx.say("connected: ", err)
                    return
                end


                local method = ngx.var.request_method
                if method == "POST" then
                    ngx.req.read_body()
                    local data = ngx.req.get_body_data()
                    ngx.say(data.."&ng_ua="..ngx.var.http_user_agent.."&ng_ip="..ngx.var.remote_addr.."&ng_ip="..ngx.var.time_local)
                elseif method == "GET" then
                    local data = ngx.var.query_string
                    ngx.say(data.."&ng_ua="..ngx.var.http_user_agent.."&ng_ip="..ngx.var.remote_addr.."&ng_ip="..ngx.var.time_local)
                end
            }
        }

    }
}
